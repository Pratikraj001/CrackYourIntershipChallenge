class Solution {
public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '{' || s.charAt(i) == '(' || s.charAt(i) == '[') {
				stack.push(s.charAt(i));
			} else if (!stack.isEmpty()) {                                                                  //  stack is not empty
				char c = stack.pop();                                                                         //  pull last inputed char from stack
				if (s.charAt(i) != getChar(c)) {                                                              // getchar function find crossponding closing char(bracket)
					return false;
				}
			} else {                                                                                        // if empty or closing bracket come first then return false
				return false;
			}
		}
		return stack.isEmpty();
	}
  
	public static char getChar(char key) {
		switch (key) {
		case '{':
			return '}';
		case '(':
			return ')';
		case '[':
			return ']';
		default:
			return '.';
		}
	}
}
